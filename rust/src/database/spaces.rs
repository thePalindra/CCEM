//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "spaces")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub space_id: i32,
    #[sea_orm(column_type = "custom(\"geography\")", nullable)]
    pub wkt: Option<String>,
    pub name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::counties::Entity")]
    Counties,
    #[sea_orm(has_many = "super::events::Entity")]
    Events,
    #[sea_orm(has_many = "super::regions::Entity")]
    Regions,
}

impl Related<super::counties::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Counties.def()
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl Related<super::regions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Regions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
